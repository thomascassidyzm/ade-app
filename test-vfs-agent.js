// Test VFS Agent
// Demonstrates how agents output to VFS

const { VFSAgentWrapper } = require('./vfs-agent-wrapper');

class TestAgent extends VFSAgentWrapper {
  constructor() {
    super('TestAgent');
    console.log('Test Agent initialized with VFS output');
  }

  async run() {
    // Log startup
    this.log('Test Agent starting up...');
    this.updateStatus('initializing');

    // Generate some APML
    const apmlMessage = {
      type: 'brief',
      id: 'test-brief-001',
      from: 'TestAgent',
      to: 'L2_AppArchitect',
      timestamp: new Date().toISOString(),
      project: {
        name: 'Test App',
        description: 'A test application to demonstrate VFS output'
      },
      requirements: {
        functional: [
          'User login',
          'Dashboard view',
          'Data visualization'
        ]
      }
    };

    this.logAPML(apmlMessage);
    this.log('Generated APML brief message');

    // Generate some code
    const sampleCode = `
// Sample React Component
import React from 'react';

export default function Dashboard() {
  return (
    <div className="dashboard">
      <h1>Welcome to the Dashboard</h1>
      <p>This is generated by the Test Agent</p>
    </div>
  );
}
`;

    this.logCode(sampleCode, 'Dashboard.jsx', 'javascript');
    this.log('Generated Dashboard component');

    // Create app structure visualization
    this.createAppVisualization({
      screens: [
        { id: 'LoginScreen', name: 'Login' },
        { id: 'DashboardScreen', name: 'Dashboard' },
        { id: 'ProfileScreen', name: 'Profile' }
      ],
      navigation: {
        'LoginScreen': { success: 'DashboardScreen' },
        'DashboardScreen': { profile: 'ProfileScreen', logout: 'LoginScreen' },
        'ProfileScreen': { back: 'DashboardScreen' }
      },
      components: [
        'Header',
        'Navigation',
        'UserCard',
        'DataChart'
      ]
    });

    this.log('Created app structure visualization');

    // Simulate some work
    this.updateStatus('processing', { task: 'Analyzing requirements' });
    await this.delay(2000);

    // Log some progress
    this.log('Analysis complete - found 3 main screens');
    this.log('Identified 4 reusable components');

    // Simulate error
    try {
      throw new Error('Simulated error for testing');
    } catch (error) {
      this.logError(error);
      this.log('Recovered from error, continuing...');
    }

    // Complete
    this.updateStatus('complete', { 
      duration: '5s',
      outputs: {
        apml: 1,
        code: 1,
        visualizations: 1
      }
    });

    this.log('Test Agent completed successfully!');
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Run if called directly
if (require.main === module) {
  console.log('Starting VFS Test Agent...');
  const agent = new TestAgent();
  
  agent.run().then(() => {
    console.log('Test completed!');
    console.log('Check the VFS dashboard to see all outputs');
    
    // Keep running for a bit to ensure messages are sent
    setTimeout(() => {
      process.exit(0);
    }, 5000);
  }).catch(error => {
    console.error('Test failed:', error);
    process.exit(1);
  });
}

module.exports = TestAgent;